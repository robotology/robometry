<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Robometry</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md__home_runner_work_robometry_robometry_README"/></para>
<para>‚ö†Ô∏è LIBRARY UNDER DEVELOPMENT ‚ö†Ô∏è</para>
<para><bold>Since it is under development, we cannot guarantee that the API of <computeroutput>librobometry</computeroutput> and the user interface of <computeroutput>telemetryDeviceDumper</computeroutput>(the configuration parameters) will not implement breaking changes. Be aware of this if you start using the code contained in this repository, sorry for the unconvenience.</bold></para>
<para><image type="html" name="https://github.com/robotology/robometry/workflows/CI%20Workflow/badge.svg" alt="Continuous Integration" inline="yes"></image>
</para>
<para><ulink url="https://anaconda.org/conda-forge/librobometry"><image type="html" name="https://anaconda.org/robotology/robometry/badges/downloads.svg" alt="Anaconda-Server Badge" inline="yes"></image>
</ulink> <ulink url="https://anaconda.org/conda-forge/librobometry"><image type="html" name="https://anaconda.org/robotology/robometry/badges/installer/conda.svg" alt="Anaconda-Server Badge" inline="yes"></image>
</ulink> <ulink url="https://anaconda.org/conda-forge/librobometry"><image type="html" name="https://anaconda.org/robotology/robometry/badges/platforms.svg" alt="Anaconda-Server Badge" inline="yes"></image>
</ulink></para>
<para>Telemetry suite for logging data from your robot ü§ñ.</para>
<sect1 id="index_1autotoc_md0">
<title>Tested OSes</title>
<para><itemizedlist>
<listitem><para>Windows 10</para>
</listitem><listitem><para>Ubuntu 20.04, 22.04</para>
</listitem><listitem><para>macOS &gt;= 10.15</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="index_1autotoc_md1">
<title>Installation from binaries</title>
<sect2 id="index_1autotoc_md2">
<title>Conda packages</title>
<para>It is possible to install on <computeroutput>linux</computeroutput>, <computeroutput>macOS</computeroutput> and <computeroutput>Windows</computeroutput> via <ulink url="https://anaconda.org/conda-forge/librobometry">conda</ulink>, just running: <programlisting filename=".bash"><codeline><highlight class="normal">conda<sp/>install<sp/>-c<sp/>conda-forge<sp/>librobometry</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md3">
<title>Installation from sources</title>
<sect2 id="index_1autotoc_md4">
<title>Dependencies</title>
<para>The dependencies are:<itemizedlist>
<listitem><para><ulink url="https://cmake.org/install/">CMake</ulink> (minimum version 3.12)</para>
</listitem><listitem><para><ulink url="https://www.boost.org/">Boost</ulink></para>
</listitem><listitem><para><ulink url="https://github.com/dic-iit/matio-cpp#installation">matio-cpp</ulink> (minimum version 0.1.1)</para>
</listitem><listitem><para><ulink url="https://github.com/nlohmann/json#integration">nlohmann_json</ulink> (minimum version 3.10.0)</para>
</listitem><listitem><para><ulink url="https://github.com/catchorg/Catch2.git">Catch2</ulink> (v3.2.1, for the unit tests)</para>
</listitem></itemizedlist>
</para>
<para>The optional dependencies are:<itemizedlist>
<listitem><para><ulink url="https://www.yarp.it/git-master/install.html">YARP</ulink> (minimum version 3.5.0)</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md5">
<title>Linux/macOS</title>
<para><programlisting><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/robotology/robometry</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>robometry</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>../</highlight></codeline>
<codeline><highlight class="normal">make</highlight></codeline>
<codeline><highlight class="normal">[sudo]<sp/>make<sp/>install</highlight></codeline>
</programlisting> Notice: sudo is not necessary if you specify the CMAKE_INSTALL_PREFIX. In this case it is necessary to add in the .bashrc or .bash_profile the following lines:</para>
<para><computeroutput>export robometry_DIR=/path/where/you/installed/</computeroutput></para>
</sect2>
<sect2 id="index_1autotoc_md6">
<title>Windows</title>
<para>With IDE build tool facilities, such as Visual Studio: <programlisting><codeline><highlight class="normal">git<sp/>clone<sp/>https://github.com/robotology/robometry</highlight></codeline>
<codeline><highlight class="normal">cd<sp/>robometry</highlight></codeline>
<codeline><highlight class="normal">mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>..</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>--build<sp/>.<sp/>--target<sp/>ALL_BUILD<sp/>--config<sp/>Release</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>--build<sp/>.<sp/>--target<sp/>INSTALL<sp/>--config<sp/>Release</highlight></codeline>
</programlisting> In order to allow CMake finding robometry, you have to specify the path where you installed in the <computeroutput>CMAKE_PREFIX_PATH</computeroutput> or exporting the <computeroutput>robometry_DIR</computeroutput> env variable pointing to the same path.</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md7">
<title>librobometry</title>
<para>In order to use this library in your own application, add this lines in your <computeroutput>CMakeLists.txt</computeroutput> <programlisting filename=".cmake"><codeline><highlight class="normal">find_package(robometry)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">add_executable(myApp)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(myApp<sp/>robometry::robometry)</highlight></codeline>
</programlisting></para>
<sect2 id="index_1autotoc_md8">
<title>Example scalar variable</title>
<para>Here is the code snippet for dumping in a <computeroutput>.mat</computeroutput> file 3 samples of the scalar variables <computeroutput>&quot;one&quot;</computeroutput> and <computeroutput>&quot;two&quot;</computeroutput>. The type of the channel is inferred when pushing the first time</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferConfig<sp/>bufferConfig;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>We<sp/>use<sp/>the<sp/>default<sp/>config,<sp/>setting<sp/>only<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>(no<sp/>auto/periodic<sp/>saving)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.n_samples<sp/>=<sp/>n_samples;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferManager<sp/>bm(bufferConfig);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bm.setFileName(&quot;buffer_manager_test&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::ChannelInfo<sp/>var_one{<sp/>&quot;one&quot;,<sp/>{1}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::ChannelInfo<sp/>var_two{<sp/>&quot;two&quot;,<sp/>{1}<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bool<sp/>ok<sp/>=<sp/>bm.addChannel(var_one);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>ok<sp/>=<sp/>ok<sp/>&amp;&amp;<sp/>bm.addChannel(var_two);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(!ok)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Problem<sp/>adding<sp/>variables....&quot;&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm.push_back(i<sp/>,<sp/>&quot;one&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(200));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm.push_back(i<sp/>+<sp/>1.0,<sp/>&quot;two&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(bm.saveToFile())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;File<sp/>saved<sp/>correctly!&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Something<sp/>went<sp/>wrong...&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> And here is the resulting .mat file:</para>
<para><programlisting><codeline><highlight class="normal">buffer_manager_test<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>description_list:<sp/>{[1√ó0<sp/>char]}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>two:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">buffer_manager_test.one<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>[1√ó3<sp/>int32]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimensions:<sp/>[1<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>elements_names:<sp/>{&apos;element_0&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>units_of_measure:<sp/>{&apos;n.d.&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>&apos;one&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamps:<sp/>[1.6481e+09<sp/>1.6481e+09<sp/>1.6481e+09]</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md9">
<title>Example vector variable</title>
<para>It is possible to save and dump also vector variables. Here is the code snippet for dumping in a <computeroutput>.mat</computeroutput> file 3 samples of the 4x1 vector variables <computeroutput>&quot;one&quot;</computeroutput> and <computeroutput>&quot;two&quot;</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferConfig<sp/>bufferConfig;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.auto_save<sp/>=<sp/>true;<sp/>//<sp/>It<sp/>will<sp/>save<sp/>when<sp/>invoking<sp/>the<sp/>destructor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.channels<sp/>=<sp/>{<sp/>{&quot;one&quot;,<sp/>{4,1},<sp/>{},<sp/>{&quot;meters&quot;}},<sp/>{&quot;two&quot;,<sp/>{4,1},<sp/>{},<sp/>{&quot;degrees&quot;}}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.filename<sp/>=<sp/>&quot;buffer_manager_test_vector&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.n_samples<sp/>=<sp/>3;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferManager<sp/>bm_v(bufferConfig);<sp/>//Only<sp/>vectors<sp/>of<sp/>doubles<sp/>are<sp/>accepted</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm_v.push_back({<sp/>i+1.0,<sp/>i+2.0,<sp/>i+3.0,<sp/>i+4.0<sp/><sp/>},<sp/>&quot;one&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(200));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm_v.push_back({<sp/>(double)i,<sp/>i*2.0,<sp/>i*3.0,<sp/>i*4.0<sp/>},<sp/>&quot;two&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">buffer_manager_test_vector<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>description_list:<sp/>{[1√ó0<sp/>char]}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>two:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_vector.one</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>[4√ó1√ó3<sp/>double]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimensions:<sp/>[4<sp/>1<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>elements_names:<sp/>{4√ó1<sp/>cell}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>units_of_measure:<sp/>{4√ó1<sp/>cell}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>&apos;one&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamps:<sp/>[1.6481e+09<sp/>1.6481e+09<sp/>1.6481e+09]</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_vector.one.elements_names</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>4√ó1<sp/>cell<sp/>array</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;element_0&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;element_1&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;element_2&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;element_3&apos;}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_vector.one.units_of_measure</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>4√ó1<sp/>cell<sp/>array</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;m&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;m&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;m&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{&apos;m&apos;}</highlight></codeline>
</programlisting></para>
<para>It is also possible to specify the name of the elements of each variable with <programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">robometry::ChannelInfo<sp/>var_one{<sp/>&quot;one&quot;,<sp/>{4,1},<sp/>{&quot;A&quot;,<sp/>&quot;B&quot;,<sp/>&quot;C&quot;,<sp/>&quot;D&quot;},<sp/>{&quot;m&quot;,<sp/>&quot;cm&quot;,<sp/>&quot;mm&quot;,<sp/>&quot;nm&quot;}};</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md10">
<title>Example matrix variable</title>
<para>Here is the code snippet for dumping in a <computeroutput>.mat</computeroutput> file 3 samples of the 2x3 matrix variable<computeroutput>&quot;one&quot;</computeroutput> and of the 3x2 matrix variable <computeroutput>&quot;two&quot;</computeroutput>. <computeroutput>BufferManager</computeroutput> expects all the inputs to be of vector types, but then input is remapped into a matrix of the specified type.</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferManager<sp/>bm_m;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bm_m.resize(3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bm_m.setFileName(&quot;buffer_manager_test_matrix&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bm_m.enablePeriodicSave(0.1);<sp/>//<sp/>This<sp/>will<sp/>try<sp/>to<sp/>save<sp/>a<sp/>file<sp/>each<sp/>0.1<sp/>sec</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bm_m.setDefaultPath(&quot;/my/preferred/path&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bm_m.setDescriptionList({&quot;head&quot;,<sp/>&quot;left_arm&quot;});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;robometry::ChannelInfo&gt;<sp/>vars{<sp/>{<sp/>&quot;one&quot;,{2,3}<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>&quot;two&quot;,{3,2}<sp/>}<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bool<sp/>ok<sp/>=<sp/>bm_m.addChannels(vars);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>(!ok)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Problem<sp/>adding<sp/>variables....&quot;&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm_m.push_back({<sp/>i<sp/>+<sp/>1,<sp/>i<sp/>+<sp/>2,<sp/>i<sp/>+<sp/>3,<sp/>i<sp/>+<sp/>4,<sp/>i<sp/>+<sp/>5,<sp/>i<sp/>+<sp/>6<sp/>},<sp/>&quot;one&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(200));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm_m.push_back({<sp/>i<sp/>*<sp/>1,<sp/>i<sp/>*<sp/>2,<sp/>i<sp/>*<sp/>3,<sp/>i<sp/>*<sp/>4,<sp/>i<sp/>*<sp/>5,<sp/>i<sp/>*<sp/>6<sp/>},<sp/>&quot;two&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_matrix.one</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>[2√ó3√ó3<sp/>int32]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dimensions:<sp/>[2<sp/>3<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>&apos;one&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timestamps:<sp/>[112104.7605783<sp/>112104.9608881<sp/>112105.1611651]</highlight></codeline>
</programlisting> </para>
</sect2>
<sect2 id="index_1autotoc_md11">
<title>Example nested struct</title>
<para>It is possible to save and dump vectors and matrices into nested <computeroutput>mat</computeroutput> structures. To add an element into the matlab struct the you should use the separator <computeroutput>::</computeroutput>. For instance the to store a vector in <computeroutput>A.B.C.my_vector</computeroutput> you should define the channel name as <computeroutput>A::B::C::my_vector</computeroutput> Here is the code snippet for dumping in a <computeroutput>.mat</computeroutput> file 3 samples of the 4x1 vector variables <computeroutput>&quot;one&quot;</computeroutput> and <computeroutput>&quot;two&quot;</computeroutput> into <computeroutput>struct1</computeroutput> and <computeroutput>struct2</computeroutput>.</para>
<para><programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferConfig<sp/>bufferConfig;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.auto_save<sp/>=<sp/>true;<sp/>//<sp/>It<sp/>will<sp/>save<sp/>when<sp/>invoking<sp/>the<sp/>destructor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.channels<sp/>=<sp/>{<sp/>{&quot;struct1::one&quot;,{4,1}},<sp/>{&quot;struct1::two&quot;,{4,1}},<sp/>{&quot;struct2::one&quot;,{4,1}}<sp/>};<sp/>//<sp/>Definition<sp/>of<sp/>the<sp/>elements<sp/>into<sp/>substruct</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.filename<sp/>=<sp/>&quot;buffer_manager_test_nested_vector&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.n_samples<sp/>=<sp/>3;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferManager<sp/>bm_v(bufferConfig);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm_v.push_back({<sp/>i+1.0,<sp/>i+2.0,<sp/>i+3.0,<sp/>i+4.0<sp/><sp/>},<sp/>&quot;struct1::one&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(200));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm_v.push_back({<sp/>(double)i,<sp/>i*2.0,<sp/>i*3.0,<sp/>i*4.0<sp/>},<sp/>&quot;struct1::two&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(200));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm_v.push_back({<sp/>(double)i,<sp/>i/2.0,<sp/>i/3.0,<sp/>i/4.0<sp/>},<sp/>&quot;struct2::one&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">buffer_manager_test_nested_vector<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>description_list:<sp/>{[1√ó0<sp/>char]}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct2:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct1:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_nested_vector.struct1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>two:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>one:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_nested_vector.struct1.one</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>[4√ó1√ó3<sp/>double]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>dimensions:<sp/>[4<sp/>1<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>&apos;one&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>timestamps:<sp/>[1.6415e+09<sp/>1.6415e+09<sp/>1.6415e+09]</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md12">
<title>Example multiple types</title>
<para><computeroutput>BufferManager</computeroutput> can be used to store channels of different types, including <computeroutput>struct</computeroutput>s. In order to store a <computeroutput>struct</computeroutput>, it is necessary to use the <computeroutput>VISITABLE_STRUCT</computeroutput> macro (see <ulink url="https://github.com/garbageslam/visit_struct">https://github.com/garbageslam/visit_struct</ulink>). The available conversions depend on <ulink url="https://github.com/ami-iit/matio-cpp"><computeroutput>matio-cpp</computeroutput></ulink>. <programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>testStruct</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>b;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">VISITABLE_STRUCT(testStruct,<sp/>a,<sp/>b);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>robometry::BufferManager<sp/>bm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>robometry::BufferConfig<sp/>bufferConfig;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>robometry::ChannelInfo<sp/>var_int{<sp/>&quot;int_channel&quot;,<sp/>{1}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>robometry::ChannelInfo<sp/>var_double{<sp/>&quot;double_channel&quot;,<sp/>{1}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>robometry::ChannelInfo<sp/>var_string{<sp/>&quot;string_channel&quot;,<sp/>{1}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>robometry::ChannelInfo<sp/>var_vector{<sp/>&quot;vector_channel&quot;,<sp/>{4,<sp/>1}};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>robometry::ChannelInfo<sp/>var_struct{<sp/>&quot;struct_channel&quot;,<sp/>{1}};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bm.addChannel(var_int);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bm.addChannel(var_double);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bm.addChannel(var_string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bm.addChannel(var_vector);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bm.addChannel(var_struct);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bufferConfig.n_samples<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bufferConfig.filename<sp/>=<sp/>&quot;buffer_manager_test_multiple_types&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bufferConfig.auto_save<sp/>=<sp/>true;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bm.configure(bufferConfig);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>testStruct<sp/>item;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm.push_back(i,<sp/>&quot;int_channel&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm.push_back(i<sp/>*<sp/>1.0,<sp/>&quot;double_channel&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm.push_back(&quot;iter&quot;<sp/>+<sp/>std::to_string(i),<sp/>&quot;string_channel&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm.push_back({i<sp/>+<sp/>0.0,<sp/>i<sp/>+<sp/>1.0,<sp/>i<sp/>+<sp/>2.0,<sp/>i<sp/>+<sp/>3.0},<sp/>&quot;vector_channel&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.a<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.b<sp/>=<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bm.push_back(item,<sp/>&quot;struct_channel&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(10));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> The above snippet of code generates channels of different types. It produces the following output. <programlisting><codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_multiple_types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">buffer_manager_test_multiple_types<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>description_list:<sp/>{[1√ó0<sp/>char]}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>yarp_robot_name:<sp/>[1√ó0<sp/>char]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>struct_channel:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector_channel:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>string_channel:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double_channel:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int_channel:<sp/>[1√ó1<sp/>struct]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_multiple_types.string_channel</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>{1√ó3<sp/>cell}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimensions:<sp/>[1<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>elements_names:<sp/>{&apos;element_0&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>units_of_measure:<sp/>{&apos;n.d.&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>&apos;string_channel&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamps:<sp/>[1.6512e+09<sp/>1.6512e+09<sp/>1.6512e+09]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;&gt;<sp/>buffer_manager_test_multiple_types.vector_channel</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ans<sp/>=</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>with<sp/>fields:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data:<sp/>[4√ó1√ó3<sp/>double]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dimensions:<sp/>[4<sp/>1<sp/>3]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>elements_names:<sp/>{4√ó1<sp/>cell}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>units_of_measure:<sp/>{&apos;n.d.&apos;}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name:<sp/>&apos;vector_channel&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timestamps:<sp/>[1.6512e+09<sp/>1.6512e+09<sp/>1.6512e+09]</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md13">
<title>Example additional callback</title>
<para><computeroutput>BufferManager</computeroutput> can call an additional callback every time the save function is called. The following example define a custom callback that saves a dummy <computeroutput>txt</computeroutput> file along with the <computeroutput>mat</computeroutput> saved by the telemetry <programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>myCallback(const<sp/>std::string&amp;<sp/>file_name,<sp/>const<sp/>SaveCallbackSaveMethod&amp;<sp/>method)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/>file_name_with_extension<sp/>=<sp/>file_name<sp/>+<sp/>&quot;.txt&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::ofstream<sp/>my_file(file_name_with_extension.c_str());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Write<sp/>to<sp/>the<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_file<sp/>&lt;&lt;<sp/>&quot;Dummy<sp/>file!&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Close<sp/>the<sp/>file</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>my_file.close();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">robometry::BufferManager<sp/>bm;</highlight></codeline>
<codeline><highlight class="normal">bm.setSaveCallback(myCallback);</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="index_1autotoc_md14">
<title>Example configuration file</title>
<para>It is possible to load the configuration of a BufferManager <bold>from a json file</bold> <programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>robometry::BufferManager<sp/>bm;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>robometry::BufferConfig<sp/>bufferConfig;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>ok<sp/>=<sp/>bufferConfigFromJson(bufferConfig,&quot;test_json.json&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ok<sp/>=<sp/>ok<sp/>&amp;&amp;<sp/>bm.configure(bufferConfig);</highlight></codeline>
</programlisting></para>
<para>Where the file has to have this format: <programlisting filename=".json"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;yarp_robot_name&quot;:<sp/>&quot;robot&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;description_list&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;This<sp/>is<sp/>a<sp/>test&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;Or<sp/>it<sp/>isn&apos;t?&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;path&quot;:&quot;/my/preferred/path&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;filename&quot;:<sp/>&quot;buffer_manager_test_conf_file&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;n_samples&quot;:<sp/>20,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;save_period&quot;:<sp/>1.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;data_threshold&quot;:<sp/>10,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;auto_save&quot;:<sp/>true,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;save_periodically&quot;:<sp/>true,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;channels&quot;:<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;dimensions&quot;:<sp/>[1,1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;elements_names&quot;:<sp/>[&quot;element_0&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;one&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;units_of_measure&quot;:<sp/>[&quot;meters&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;dimensions&quot;:<sp/>[1,1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;elements_names&quot;:<sp/>[&quot;element_0&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>&quot;two&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;units_of_measure&quot;:<sp/>[&quot;degrees&quot;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;enable_compression&quot;:<sp/>true,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;file_indexing&quot;:<sp/>&quot;%Y_%m_%d_%H_%M_%S&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;mat_file_version&quot;:<sp/>&quot;v7_3&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> The configuration can be saved <bold>to a json file</bold> <programlisting><codeline><highlight class="normal">{c++}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>robometry::BufferConfig<sp/>bufferConfig;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.n_samples<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.save_period<sp/>=<sp/>0.1;<sp/>//seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.data_threshold<sp/>=<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.save_periodically<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;robometry::ChannelInfo&gt;<sp/>vars{<sp/>{<sp/>&quot;one&quot;,{2,3}<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>&quot;two&quot;,{3,2}<sp/>}<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>bufferConfig.channels<sp/>=<sp/>vars;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>auto<sp/>ok<sp/>=<sp/>bufferConfigToJson(bufferConfig,<sp/>&quot;test_json_write.json&quot;);</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md15">
<title>TelemetryDeviceDumper</title>
<para>The <computeroutput>telemetryDeviceDumper</computeroutput> is a <ulink url="http://yarp.it/git-master/note_devices.html">yarp device</ulink> that has to be launched through the <ulink url="http://yarp.it/git-master/yarprobotinterface.html"><computeroutput>yarprobotinterface</computeroutput></ulink> for dumping quantities from your robot(e.g. encoders, velocities etc.) in base of what specified in the configuration.</para>
<sect2 id="index_1autotoc_md16">
<title>Export the env variables</title>
<para><itemizedlist>
<listitem><para>Add <computeroutput>${CMAKE_INSTALL_PREFIX}/share/yarp</computeroutput> (where <computeroutput>${CMAKE_INSTALL_PREFIX}</computeroutput> needs to be substituted to the directory that you choose as the <computeroutput>CMAKE_INSTALL_PREFIX</computeroutput>) to your <computeroutput>YARP_DATA_DIRS</computeroutput> environment variable (for more on the <computeroutput>YARP_DATA_DIRS</computeroutput> env variable, see <ulink url="http://www.yarp.it/yarp_data_dirs.html">YARP documentation on data directories</ulink> ).</para>
</listitem><listitem><para>Once you do that, you should be able to find the <computeroutput>telemetryDeviceDumper</computeroutput> device compiled by this repo using the command <computeroutput>yarp plugin telemetryDeviceDumper</computeroutput>, which should have an output similar to: <programlisting><codeline><highlight class="normal">Yes,<sp/>this<sp/>is<sp/>a<sp/>YARP<sp/>plugin</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>library:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CMAKE_INSTALL_PREFIX/lib/yarp/yarp_telemetryDeviceDumper.dll</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>system<sp/>version:<sp/>5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>class<sp/>name:<sp/><sp/><sp/><sp/><sp/>robometry::TelemetryDeviceDumper</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>base<sp/>class:<sp/><sp/><sp/><sp/><sp/>yarp::dev::DeviceDriver</highlight></codeline>
</programlisting> If this is not the case, there could be some problems in finding the plugin. In that case, just move yourself to the <computeroutput>${CMAKE_INSTALL_PREFIX}/share/yarp</computeroutput> directory and launch the device from there.</para>
</listitem></itemizedlist>
</para>
<para>Further documentation about the configuration parameters and the mapping of the variables inside the .mat file can be browsed <ulink url="https://robotology.github.io/robometry/classrobometry_1_1TelemetryDeviceDumper.html">here</ulink></para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md17">
<title>Contributing</title>
<para>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</para>
</sect1>
<sect1 id="index_1autotoc_md18">
<title>License</title>
<para><ulink url="https://github.com/robotology/robometry/blob/master/LICENSE">See License</ulink> </para>
</sect1>
    </detaileddescription>
    <location file="/home/runner/work/robometry/robometry/README.md"/>
  </compounddef>
</doxygen>
